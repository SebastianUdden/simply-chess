describe("Try some wrong chess moves", () => {
  before(() => {
    cy.visit("http://localhost:8000")
  })
  it("Start game", () => {
    cy.get("#play").click()
  })
  it("Select an empty square before current players chesspiece", () => {
    cy.get("#D3").click()
    cy.get("#D3").should("not.have.data", "isSelected")
  })
  it("Select an enemy chesspiece before current players chesspiece", () => {
    cy.get("#D7").click()
    cy.get("#D7").should("not.have.data", "isSelected")
  })
  it("Select a square further than allowed distance", () => {
    cy.get("#D2").click()
    cy.get("#D5").click()
    cy.get("#D5").should("not.have.data", "isSelected")
  })
  it("Move diagonally when not allowed", () => {
    cy.get("#D2").click()
    cy.get("#E3").click()
    cy.get("#E3").should("not.have.data", "isSelected")
  })
  it("Move straight when not allowed", () => {
    cy.get("#C2").click()
    cy.get("#C3").click()
    cy.get("#C1").click()
    cy.get("#C2").click()
    cy.get("#C2").should("not.have.data", "isSelected")
  })
  it("Move straight through a unit when not allowed", () => {
    cy.get("#D1").click()
    cy.get("#D3").click()
    cy.get("#D3").should("not.have.data", "isSelected")
  })
  it("Move diagonally through a unit when not allowed", () => {
    cy.get("#D1").click()
    cy.get("#F3").click()
    cy.get("#F3").should("not.have.data", "isSelected")
  })
  it("Quit game", () => {
    cy.get("#quit").click()
  })
  it("Should be 0-0 in score", () => {
    cy.get("#score-white").should("have.text", "0")
    cy.get("#score-black").should("have.text", "0")
  })
})

const W = "White"
const B = "Black"

describe("Play a game of chess", () => {
  before(() => {
    cy.visit("http://localhost:8000")
  })
  it("Start game", () => {
    cy.get("#play").click()
  })
  const moveChessPiece = (player, type, pos1, pos2) =>
    it(`${player} - Move ${pos1} ${type} to ${pos2}`, () => {
      cy.get(`#${pos1}`).click()
      cy.get(`#${pos2}`).click()
    })
  moveChessPiece(W, "pawn", "D2", "D4")
  moveChessPiece(B, "pawn", "D7", "D5")
  moveChessPiece(W, "pawn", "E2", "E3")
  moveChessPiece(B, "knight", "B8", "C6")
  moveChessPiece(W, "pawn", "C2", "C4")
  moveChessPiece(B, "knight", "G8", "F6")
  moveChessPiece(W, "knight", "B1", "A3")
  moveChessPiece(B, "pawn", "E7", "E6")
  moveChessPiece(W, "pawn", "F2", "F3")
  moveChessPiece(B, "runner", "F8", "B4")
  moveChessPiece(W, "runner", "C1", "D2")
  moveChessPiece(B, "pawn", "D5", "C4")
  moveChessPiece(W, "runner", "F1", "C4")
  moveChessPiece(B, "pawn", "H7", "H5")
  moveChessPiece(W, "queen", "D1", "A4")
  moveChessPiece(B, "runner", "B4", "A3")
  moveChessPiece(W, "pawn", "B2", "A3")
  moveChessPiece(B, "runner", "C8", "D7")
  moveChessPiece(W, "tower", "A1", "B1")
  moveChessPiece(B, "pawn", "A7", "A6")
  moveChessPiece(W, "tower", "B1", "B7")
  moveChessPiece(B, "tower", "A8", "B8")
  moveChessPiece(W, "tower", "B7", "B8")
  moveChessPiece(B, "queen", "D8", "B8")
  moveChessPiece(W, "pawn", "G2", "G4")
  moveChessPiece(B, "queen", "B8", "B1")
  moveChessPiece(W, "king", "E1", "E2")
  moveChessPiece(B, "knight", "C6", "D4")
  moveChessPiece(W, "pawn", "E3", "D4")
  moveChessPiece(B, "runner", "D7", "A4")
  moveChessPiece(W, "runner", "C4", "D3")
  moveChessPiece(B, "queen", "B1", "A2")
  moveChessPiece(W, "pawn", "G4", "H5")
  moveChessPiece(B, "tower", "H8", "H5")
  moveChessPiece(W, "pawn", "F3", "F4")
  moveChessPiece(B, "queen", "A2", "A3")
  moveChessPiece(W, "knight", "G1", "F3")
  moveChessPiece(B, "runner", "A4", "C6")
  moveChessPiece(W, "tower", "H1", "G1")
  moveChessPiece(B, "runner", "C6", "F3")
  moveChessPiece(W, "king", "E2", "F3")
  moveChessPiece(B, "queen", "A3", "D3")
  moveChessPiece(W, "runner", "D2", "E3")
  moveChessPiece(B, "tower", "H5", "H3")
  moveChessPiece(W, "tower", "G1", "G3")
  moveChessPiece(B, "tower", "H3", "H2")
  moveChessPiece(W, "tower", "G3", "G7")
  moveChessPiece(B, "queen", "D3", "F1")
  moveChessPiece(W, "king", "F3", "G3")
  moveChessPiece(B, "queen", "F1", "E2")
  moveChessPiece(W, "runner", "E3", "G1")
  moveChessPiece(B, "tower", "H2", "G2")
  moveChessPiece(W, "king", "G3", "H4")
  moveChessPiece(B, "tower", "G2", "G7")
  moveChessPiece(W, "runner", "G1", "H2")
  moveChessPiece(B, "queen", "E2", "H2")
  moveChessPiece(W, "king", "H4", "G4")
  moveChessPiece(B, "tower", "G7", "G4")

  it("Should be 0-1 in black player's favor", () => {
    cy.get("#score-white").should("have.text", "0")
    cy.get("#score-black").should("have.text", "1")
  })
})
